<!doctype html>
<html lang='es'>
	<head>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='generator' content={Astro.generator} />
		<title>{Astro.props.title}</title>

		<script>
  document.addEventListener('DOMContentLoaded', () => {
    const htmlElement = document.documentElement;
    const ninjaKeysElement = document.querySelector('ninja-keys');
    const darkModeButton = document.querySelector('.dark-mode');
    const lightModeButton = document.querySelector('.light-mode');

    function applyTheme(theme) {
      if (theme === 'dark') {
        htmlElement.classList.add('dark');
        if (ninjaKeysElement) {
          ninjaKeysElement.classList.add('dark');
        }
        if (darkModeButton) darkModeButton.style.display = 'none';
        if (lightModeButton) lightModeButton.style.display = 'block';
      } else {
        htmlElement.classList.remove('dark');
        if (ninjaKeysElement) {
          ninjaKeysElement.classList.remove('dark');
        }
        if (lightModeButton) lightModeButton.style.display = 'none';
        if (darkModeButton) darkModeButton.style.display = 'block';
      }
      localStorage.setItem('color-theme', theme);
    }

    function initializeTheme() {
      const storedTheme = localStorage.getItem('color-theme');
      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

      if (storedTheme) {
        applyTheme(storedTheme);
      } else {
        applyTheme(prefersDark ? 'dark' : 'light');
      }
    }

    if (darkModeButton) {
      darkModeButton.addEventListener('click', () => applyTheme('dark'));
    }
    if (lightModeButton) {
      lightModeButton.addEventListener('click', () => applyTheme('light'));
    }

    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      // Only change theme if no theme is stored in localStorage
      // This prevents overriding a user's explicit theme choice
      if (!localStorage.getItem('color-theme')) {
        applyTheme(e.matches ? 'dark' : 'light');
      }
    });

    initializeTheme();
  });
</script>
	</head>
	<body>
		<slot />
	</body>
</html>

<style is:global>
	html {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			monospace;
		/* background: #fff; */
		letter-spacing: -0.025rem;
		color-scheme: light;
	}

	html.dark {
		color-scheme: dark;
	}

	html.dark {
		--text-color: #ddd;
		--h2-color: #999;
		--span-color: #888;
		--avatar-color: #eee;

		--link-color: #bbb;
		--border-color: #666;

		--date-color: #999;
	}

	@media (prefers-color-scheme: dark) {
		p {
			color: var(--text-color);
		}
	}

	body,
	figure {
		margin: 0;
		padding: 0;
	}

	a {
		text-decoration: none;
	}

	ul,
	ol {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	*,
	*::before,
	*::after {
		box-sizing: border-box;
	}

	h1,
	h2,
	h3,
	h4 {
		font-family:
			system-ui,
			-apple-system,
			BlinkMacSystemFont,
			'Segoe UI',
			Roboto,
			Oxygen,
			Ubuntu,
			Cantarell,
			'Open Sans',
			'Helvetica Neue',
			sans-serif;
		margin: 0;
	}

	p {
		/* color: #666; */
		font-size: 0.9rem;
		line-height: 1.5;
		margin: 0;
		text-wrap: pretty;
		white-space: pre-line;
	}
</style>
