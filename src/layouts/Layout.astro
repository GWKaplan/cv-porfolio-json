---
import { basics } from '@cv';
const { name, label, summary, image, url, email, phone, location, profiles } = basics;

const { title: pageTitle } = Astro.props;
const siteTitle = name;
const description = summary;
const ogImage = new URL(image, Astro.url.origin).href;
const canonicalURL = new URL(Astro.url.pathname, Astro.site ?? url).href;
---

<!doctype html>
<html lang='es'>
	<head>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width' />
		<link rel='icon' type='image/svg+xml' href='/favicon.svg' />
		<meta name='generator' content={Astro.generator} />

		<!-- SEO -->
		<title>{pageTitle}</title>
		<meta name='description' content={description} />
		<meta name='author' content={name} />
		<link rel='canonical' href={canonicalURL} />

		<!-- Open Graph / Facebook -->
		<meta property='og:type' content='website' />
		<meta property='og:url' content={url} />
		<meta property='og:title' content={siteTitle} />
		<meta property='og:description' content={description} />
		<meta property='og:image' content={ogImage} />

		<!-- Twitter -->
		<meta property='twitter:card' content='summary_large_image' />
		<meta property='twitter:url' content={url} />
		<meta property='twitter:title' content={siteTitle} />
		<meta property='twitter:description' content={description} />
		<meta property='twitter:image' content={ogImage} />

		<!-- Datos Estructurados (JSON-LD) -->
		<script
			type='application/ld+json'
			set:html={JSON.stringify({
				'@context': 'https://schema.org',
				'@type': 'Person',
				name: name,
				jobTitle: label,
				url: url,
				image: image,
				sameAs: profiles.map((profile) => profile.url),
				email: `mailto:${email}`,
				telephone: phone,
				address: {
					'@type': 'PostalAddress',
					addressLocality: location.city,
					addressRegion: location.region,
					postalCode: location.postalCode,
					addressCountry: location.countryCode,
				},
			})}
		/>

		<!-- Script para evitar FOUC (Flash of Unstyled Content) del tema -->
		<script is:inline>
			const theme = (() => {
				if (typeof localStorage !== 'undefined' && localStorage.getItem('color-theme')) {
					return localStorage.getItem('color-theme');
				}
				if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
					return 'dark';
				}
				return 'light';
			})();

			if (theme === 'dark') {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}
		</script>
	</head>
	<body>
		<slot />
		<!-- Script para la interactividad del cambio de tema -->
		<script>
			const themeToggle = document.querySelector('#theme-toggle-btn');
			const ninjaKeys = document.querySelector('ninja-keys');

			const handleToggle = () => {
				const isDark = document.documentElement.classList.toggle('dark');
				localStorage.setItem('color-theme', isDark ? 'dark' : 'light');

				if (ninjaKeys) {
					ninjaKeys.classList.toggle('dark', isDark);
				}
			};

			if (themeToggle) {
				themeToggle.addEventListener('click', handleToggle);
			}

			// Sincronizar con cambios del sistema operativo si no hay preferencia guardada
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
				if (!localStorage.getItem('color-theme')) {
					const isDark = e.matches;
					document.documentElement.classList.toggle('dark', isDark);
					if (ninjaKeys) {
						ninjaKeys.classList.toggle('dark', isDark);
					}
				}
			});
		</script>
	</body>
</html>

<style is:global>
	html {
		font-family:
			Menlo,
			Monaco,
			Lucida Console,
			monospace;
		/* background: #fff; */
		letter-spacing: -0.025rem;
		color-scheme: light;
	}

	html.dark {
		color-scheme: dark;
	}

	html.dark {
		--text-color: #ddd;
		--h2-color: #999;
		--span-color: #888;
		--avatar-color: #eee;

		--link-color: #bbb;
		--border-color: #666;

		--date-color: #999;
	}

	/* Ocultar/mostrar iconos de tema con CSS en lugar de JS */
	.light-mode,
	html.dark .dark-mode {
		display: none;
	}

	.dark-mode,
	html.dark .light-mode {
		display: block;
	}

	@media (prefers-color-scheme: dark) {
		p,
		h3,
		h3 > a {
			color: var(--text-color) !important;
		}

		h4 {
			color: var(--link-color) !important;
		}
	}

	body,
	figure {
		margin: 0;
		padding: 0;
	}

	a {
		text-decoration: none;
	}

	ul,
	ol {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	*,
	*::before,
	*::after {
		box-sizing: border-box;
	}

	h1,
	h2,
	h3,
	h4 {
		font-family:
			system-ui,
			-apple-system,
			BlinkMacSystemFont,
			'Segoe UI',
			Roboto,
			Oxygen,
			Ubuntu,
			Cantarell,
			'Open Sans',
			'Helvetica Neue',
			sans-serif;
		margin: 0;
	}

	p {
		/* color: #666; */
		font-size: 0.9rem;
		line-height: 1.5;
		margin: 0;
		text-wrap: pretty;
		white-space: pre-line;
	}
</style>
